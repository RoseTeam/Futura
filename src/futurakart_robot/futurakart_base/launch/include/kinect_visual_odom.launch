<?xml version="1.0"?>
<!--

    Robot navigation configuration :

    Choose a configuration : conf_a (default) or conf_b
    See docs/rtabmap-example.md for details

    Following topic are published :

     - /$(arg camera_name)/rgb/image          (from freenect)
     - /$(arg camera_name)/rgb/camera_info    (from freenect)
     - /$(arg camera_name)/depth/image        (from freenect)
     ...
     - /$(arg camera_name)/laserscan          (from depthimage_to_laserscan)

-->
<launch>

    <!-- Setup default topic names from Kinect:  -->
    <arg name="camera_name" default="camera"/>
    <arg name="rgb_image" default="/$(arg camera_name)/rgb/image_rect_color"/>
    <arg name="rgb_camera_info" default="/$(arg camera_name)/rgb/camera_info"/>
    <arg name="depth_image" default="/$(arg camera_name)/depth_registered/image_raw"/>
    <arg name="depth_camera_info" default="/$(arg camera_name)/depth_registered/camera_info"/>
    <arg name="base_kinect_link" default="$(arg camera_name)_link" /> <!-- tf coordinate system name from Kinect -->
    <arg name="laserscan_topic" default="/$(arg camera_name)/laserscan"/>
    <arg name="laserscan_frame" default="$(arg base_kinect_link)"/>     <!-- depthimage_to_laserscan output frame id = The frame id of the laser scan. For point clouds coming from an "optical" frame with Z forward, this value should be set to the corresponding frame with X forward and Z up. -->
    <arg name="mobile_frame" default="$(arg base_kinect_link)"/> <!-- visual odom -> frame_id -->

    <arg name="kinect_device_id" default="#1"/> <!--Use first device found-->


    <!-- ********************************************************************* -->
    <!--   Setup sensors : image from Kinect, depth from Kinect, laserscan     -->
    <!-- ********************************************************************* -->

    <!-- START Kinect -->
    <include file="$(find freenect_launch)/launch/freenect.launch">
        <!-- https://github.com/ros-drivers/freenect_stack/blob/master/freenect_launch/launch/freenect.launch -->

        <!-- device_id can have the following formats:
        "B00367707227042B": Use device with given serial number
        "#1"              : Use first device found
        -->
        <arg name="device_id" value="$(arg kinect_device_id)"/>

        <arg name="camera" value="$(arg camera_name)"/>

        <arg name="depth_registration" value="true" />

        <arg name="data_skip" value="1" />

        <arg name="num_worker_threads" value="4" />

        <arg name="publish_tf" value="false" />

        <!-- Calibration files -->
        <!--arg name="rgb_camera_info_url"   value="" /-->
        <!--arg name="depth_camera_info_url" value="" /-->

        <!-- Processing Modules -->
        <arg name="rgb_processing"                  value="true" />
        <arg name="ir_processing"                   value="true" />
        <arg name="depth_processing"                value="true" />
        <arg name="depth_registered_processing"     value="true" />
        <arg name="disparity_processing"            value="false" />
        <arg name="disparity_registered_processing" value="false" />
        <arg name="hw_registered_processing"        value="false" />
        <arg name="sw_registered_processing"        value="false" />

    </include>

    <!--
        Kinect Topics published :
            /$(arg camera_name)/debayer/parameter_descriptions
            /$(arg camera_name)/debayer/parameter_updates
            /$(arg camera_name)/depth/camera_info
            /$(arg camera_name)/depth/image
            /$(arg camera_name)/depth/image_raw
            /$(arg camera_name)/depth/image_rect
            /$(arg camera_name)/depth/image_rect_raw
            /$(arg camera_name)/depth/points
            /$(arg camera_name)/depth_rectify_depth/parameter_descriptions
            /$(arg camera_name)/depth_rectify_depth/parameter_updates
            /$(arg camera_name)/depth_registered/camera_info
            /$(arg camera_name)/depth_registered/image_raw
            /$(arg camera_name)/driver/parameter_descriptions
            /$(arg camera_name)/driver/parameter_updates
            /$(arg camera_name)/ir/camera_info
            /$(arg camera_name)/ir/image_raw
            /$(arg camera_name)/ir/image_rect_ir
            /$(arg camera_name)/projector/camera_info
            /$(arg camera_name)/rectify_color/parameter_descriptions
            /$(arg camera_name)/rectify_color/parameter_updates
            /$(arg camera_name)/rectify_ir/parameter_descriptions
            /$(arg camera_name)/rectify_ir/parameter_updates
            /$(arg camera_name)/rectify_mono/parameter_descriptions
            /$(arg camera_name)/rectify_mono/parameter_updates
            /$(arg camera_name)/rgb/camera_info
            /$(arg camera_name)/rgb/image_color
            /$(arg camera_name)/rgb/image_mono
            /$(arg camera_name)/rgb/image_raw
            /$(arg camera_name)/rgb/image_rect_color
            /$(arg camera_name)/rgb/image_rect_mono

            /tf
                /camera_link
                /camera_rgb_optical_frame
                /camera_depth_optical_frame
                /camera_rgb_frame
                /camera_depth_frame
    -->

    <!--RGBD to LaserScan-->
    <node pkg="depthimage_to_laserscan"
          name="$(arg camera_name)_depthimage_to_laserscan"
          type="depthimage_to_laserscan"
          output="screen">
        <remap from="image" to="$(arg depth_image)" />
        <remap from="camera_info" to="$(arg depth_camera_info)" />
        <remap from="scan" to="$(arg laserscan_topic)" />

        <!-- laser scan height = The number of pixels rows to use to generate the laserscan.
        For each column, the scan will return the minimum value for those pixels centered vertically in the image.    -->
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="$(arg laserscan_frame)"/>
        <param name="_image_transport" value="compressed"/>
    </node>

    <!-- ********************************************************************* -->
    <!--  Setup visual odometry : -->
    <!-- ********************************************************************* -->
    <!-- see http://wiki.ros.org/rtabmap_ros#rgbd_odometry  -->
    <!-- rosrun rtabmap_ros rgbd_odometry - -params -->
    <node pkg="rtabmap_ros" type="rgbd_odometry" name="$(arg camera_name)_rgbd_odometry" output="screen">
        <remap from="rgb/image"       to="$(arg rgb_image)"/>
        <remap from="rgb/camera_info" to="$(arg rgb_camera_info)"/>
        <remap from="depth/image"     to="$(arg depth_image)"/>
        <!--<remap from="odom" to="$(arg camera_name)/odom"/>-->
        <param name="Reg/Force3DoF" type="string" value="true"/> <!-- (x, y, theta) instead of (x, y, z, roll, pitch, yaw) -->
        <param name="frame_id" type="string" value="$(arg mobile_frame)"/>
        <param name="odom_frame_id" type="string" value="$(arg camera_name)_odom"/>

        <!--See http://wiki.ros.org/rtabmap_ros/Tutorials/Advanced%20Parameter%20Tuning-->
        <param name="Rtabmap/StartNewMapOnLoopClosure" value="true"/>
        <param name="Odom/ResetCountdown"              value="5" />

        <!-- 0=Frame-to-Map (F2M) 1=Frame-to-Frame (F2F) -->
        <param name="Odom/Strategy" value="1"/>
        <!-- Correspondences: 0=Features Matching, 1=Optical Flow . Optical flow may give more matches, but less robust correspondences-->
        <param name="Vis/CorType" value="1"/>

    </node>

</launch>
